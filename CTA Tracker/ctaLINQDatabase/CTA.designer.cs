#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ctaLINQDatabase
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CTA")]
	public partial class CTADataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLine(Line instance);
    partial void UpdateLine(Line instance);
    partial void DeleteLine(Line instance);
    partial void InsertRidership(Ridership instance);
    partial void UpdateRidership(Ridership instance);
    partial void DeleteRidership(Ridership instance);
    partial void InsertStation(Station instance);
    partial void UpdateStation(Station instance);
    partial void DeleteStation(Station instance);
    partial void InsertStopDetail(StopDetail instance);
    partial void UpdateStopDetail(StopDetail instance);
    partial void DeleteStopDetail(StopDetail instance);
    partial void InsertStop(Stop instance);
    partial void UpdateStop(Stop instance);
    partial void DeleteStop(Stop instance);
    #endregion
		
		public CTADataContext() : 
				base(global::ctaLINQDatabase.Properties.Settings.Default.CTAConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CTADataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CTADataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CTADataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CTADataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Line> Lines
		{
			get
			{
				return this.GetTable<Line>();
			}
		}
		
		public System.Data.Linq.Table<Ridership> Riderships
		{
			get
			{
				return this.GetTable<Ridership>();
			}
		}
		
		public System.Data.Linq.Table<Station> Stations
		{
			get
			{
				return this.GetTable<Station>();
			}
		}
		
		public System.Data.Linq.Table<StopDetail> StopDetails
		{
			get
			{
				return this.GetTable<StopDetail>();
			}
		}
		
		public System.Data.Linq.Table<Stop> Stops
		{
			get
			{
				return this.GetTable<Stop>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lines")]
	public partial class Line : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _LineID;
		
		private string _Color;
		
		private EntitySet<StopDetail> _StopDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLineIDChanging(byte value);
    partial void OnLineIDChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    #endregion
		
		public Line()
		{
			this._StopDetails = new EntitySet<StopDetail>(new Action<StopDetail>(this.attach_StopDetails), new Action<StopDetail>(this.detach_StopDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_StopDetail", Storage="_StopDetails", ThisKey="LineID", OtherKey="LineID")]
		public EntitySet<StopDetail> StopDetails
		{
			get
			{
				return this._StopDetails;
			}
			set
			{
				this._StopDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StopDetails(StopDetail entity)
		{
			this.SendPropertyChanging();
			entity.Line = this;
		}
		
		private void detach_StopDetails(StopDetail entity)
		{
			this.SendPropertyChanging();
			entity.Line = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Riderships")]
	public partial class Ridership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RiderID;
		
		private int _StationID;
		
		private System.DateTime _TheDate;
		
		private string _TypeOfDay;
		
		private int _DailyTotal;
		
		private EntityRef<Station> _Station;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRiderIDChanging(int value);
    partial void OnRiderIDChanged();
    partial void OnStationIDChanging(int value);
    partial void OnStationIDChanged();
    partial void OnTheDateChanging(System.DateTime value);
    partial void OnTheDateChanged();
    partial void OnTypeOfDayChanging(string value);
    partial void OnTypeOfDayChanged();
    partial void OnDailyTotalChanging(int value);
    partial void OnDailyTotalChanged();
    #endregion
		
		public Ridership()
		{
			this._Station = default(EntityRef<Station>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RiderID
		{
			get
			{
				return this._RiderID;
			}
			set
			{
				if ((this._RiderID != value))
				{
					this.OnRiderIDChanging(value);
					this.SendPropertyChanging();
					this._RiderID = value;
					this.SendPropertyChanged("RiderID");
					this.OnRiderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationID", DbType="Int NOT NULL")]
		public int StationID
		{
			get
			{
				return this._StationID;
			}
			set
			{
				if ((this._StationID != value))
				{
					if (this._Station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStationIDChanging(value);
					this.SendPropertyChanging();
					this._StationID = value;
					this.SendPropertyChanged("StationID");
					this.OnStationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TheDate", DbType="Date NOT NULL")]
		public System.DateTime TheDate
		{
			get
			{
				return this._TheDate;
			}
			set
			{
				if ((this._TheDate != value))
				{
					this.OnTheDateChanging(value);
					this.SendPropertyChanging();
					this._TheDate = value;
					this.SendPropertyChanged("TheDate");
					this.OnTheDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfDay", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string TypeOfDay
		{
			get
			{
				return this._TypeOfDay;
			}
			set
			{
				if ((this._TypeOfDay != value))
				{
					this.OnTypeOfDayChanging(value);
					this.SendPropertyChanging();
					this._TypeOfDay = value;
					this.SendPropertyChanged("TypeOfDay");
					this.OnTypeOfDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailyTotal", DbType="Int NOT NULL")]
		public int DailyTotal
		{
			get
			{
				return this._DailyTotal;
			}
			set
			{
				if ((this._DailyTotal != value))
				{
					this.OnDailyTotalChanging(value);
					this.SendPropertyChanging();
					this._DailyTotal = value;
					this.SendPropertyChanged("DailyTotal");
					this.OnDailyTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_Ridership", Storage="_Station", ThisKey="StationID", OtherKey="StationID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Station Station
		{
			get
			{
				return this._Station.Entity;
			}
			set
			{
				Station previousValue = this._Station.Entity;
				if (((previousValue != value) 
							|| (this._Station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Station.Entity = null;
						previousValue.Riderships.Remove(this);
					}
					this._Station.Entity = value;
					if ((value != null))
					{
						value.Riderships.Add(this);
						this._StationID = value.StationID;
					}
					else
					{
						this._StationID = default(int);
					}
					this.SendPropertyChanged("Station");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stations")]
	public partial class Station : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StationID;
		
		private string _Name;
		
		private EntitySet<Ridership> _Riderships;
		
		private EntitySet<Stop> _Stops;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStationIDChanging(int value);
    partial void OnStationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Station()
		{
			this._Riderships = new EntitySet<Ridership>(new Action<Ridership>(this.attach_Riderships), new Action<Ridership>(this.detach_Riderships));
			this._Stops = new EntitySet<Stop>(new Action<Stop>(this.attach_Stops), new Action<Stop>(this.detach_Stops));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StationID
		{
			get
			{
				return this._StationID;
			}
			set
			{
				if ((this._StationID != value))
				{
					this.OnStationIDChanging(value);
					this.SendPropertyChanging();
					this._StationID = value;
					this.SendPropertyChanged("StationID");
					this.OnStationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_Ridership", Storage="_Riderships", ThisKey="StationID", OtherKey="StationID")]
		public EntitySet<Ridership> Riderships
		{
			get
			{
				return this._Riderships;
			}
			set
			{
				this._Riderships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_Stop", Storage="_Stops", ThisKey="StationID", OtherKey="StationID")]
		public EntitySet<Stop> Stops
		{
			get
			{
				return this._Stops;
			}
			set
			{
				this._Stops.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Riderships(Ridership entity)
		{
			this.SendPropertyChanging();
			entity.Station = this;
		}
		
		private void detach_Riderships(Ridership entity)
		{
			this.SendPropertyChanging();
			entity.Station = null;
		}
		
		private void attach_Stops(Stop entity)
		{
			this.SendPropertyChanging();
			entity.Station = this;
		}
		
		private void detach_Stops(Stop entity)
		{
			this.SendPropertyChanging();
			entity.Station = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StopDetails")]
	public partial class StopDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StopID;
		
		private byte _LineID;
		
		private EntityRef<Line> _Line;
		
		private EntityRef<Stop> _Stop;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStopIDChanging(int value);
    partial void OnStopIDChanged();
    partial void OnLineIDChanging(byte value);
    partial void OnLineIDChanged();
    #endregion
		
		public StopDetail()
		{
			this._Line = default(EntityRef<Line>);
			this._Stop = default(EntityRef<Stop>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StopID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StopID
		{
			get
			{
				return this._StopID;
			}
			set
			{
				if ((this._StopID != value))
				{
					if (this._Stop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStopIDChanging(value);
					this.SendPropertyChanging();
					this._StopID = value;
					this.SendPropertyChanged("StopID");
					this.OnStopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					if (this._Line.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Line_StopDetail", Storage="_Line", ThisKey="LineID", OtherKey="LineID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Line Line
		{
			get
			{
				return this._Line.Entity;
			}
			set
			{
				Line previousValue = this._Line.Entity;
				if (((previousValue != value) 
							|| (this._Line.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Line.Entity = null;
						previousValue.StopDetails.Remove(this);
					}
					this._Line.Entity = value;
					if ((value != null))
					{
						value.StopDetails.Add(this);
						this._LineID = value.LineID;
					}
					else
					{
						this._LineID = default(byte);
					}
					this.SendPropertyChanged("Line");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stop_StopDetail", Storage="_Stop", ThisKey="StopID", OtherKey="StopID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Stop Stop
		{
			get
			{
				return this._Stop.Entity;
			}
			set
			{
				Stop previousValue = this._Stop.Entity;
				if (((previousValue != value) 
							|| (this._Stop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stop.Entity = null;
						previousValue.StopDetails.Remove(this);
					}
					this._Stop.Entity = value;
					if ((value != null))
					{
						value.StopDetails.Add(this);
						this._StopID = value.StopID;
					}
					else
					{
						this._StopID = default(int);
					}
					this.SendPropertyChanged("Stop");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stops")]
	public partial class Stop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StopID;
		
		private int _StationID;
		
		private string _Name;
		
		private string _Direction;
		
		private bool _ADA;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private EntitySet<StopDetail> _StopDetails;
		
		private EntityRef<Station> _Station;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStopIDChanging(int value);
    partial void OnStopIDChanged();
    partial void OnStationIDChanging(int value);
    partial void OnStationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDirectionChanging(string value);
    partial void OnDirectionChanged();
    partial void OnADAChanging(bool value);
    partial void OnADAChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    #endregion
		
		public Stop()
		{
			this._StopDetails = new EntitySet<StopDetail>(new Action<StopDetail>(this.attach_StopDetails), new Action<StopDetail>(this.detach_StopDetails));
			this._Station = default(EntityRef<Station>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StopID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StopID
		{
			get
			{
				return this._StopID;
			}
			set
			{
				if ((this._StopID != value))
				{
					this.OnStopIDChanging(value);
					this.SendPropertyChanging();
					this._StopID = value;
					this.SendPropertyChanged("StopID");
					this.OnStopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationID", DbType="Int NOT NULL")]
		public int StationID
		{
			get
			{
				return this._StationID;
			}
			set
			{
				if ((this._StationID != value))
				{
					if (this._Station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStationIDChanging(value);
					this.SendPropertyChanging();
					this._StationID = value;
					this.SendPropertyChanged("StationID");
					this.OnStationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direction", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this.OnDirectionChanging(value);
					this.SendPropertyChanging();
					this._Direction = value;
					this.SendPropertyChanged("Direction");
					this.OnDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADA", DbType="Bit NOT NULL")]
		public bool ADA
		{
			get
			{
				return this._ADA;
			}
			set
			{
				if ((this._ADA != value))
				{
					this.OnADAChanging(value);
					this.SendPropertyChanging();
					this._ADA = value;
					this.SendPropertyChanged("ADA");
					this.OnADAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stop_StopDetail", Storage="_StopDetails", ThisKey="StopID", OtherKey="StopID")]
		public EntitySet<StopDetail> StopDetails
		{
			get
			{
				return this._StopDetails;
			}
			set
			{
				this._StopDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_Stop", Storage="_Station", ThisKey="StationID", OtherKey="StationID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Station Station
		{
			get
			{
				return this._Station.Entity;
			}
			set
			{
				Station previousValue = this._Station.Entity;
				if (((previousValue != value) 
							|| (this._Station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Station.Entity = null;
						previousValue.Stops.Remove(this);
					}
					this._Station.Entity = value;
					if ((value != null))
					{
						value.Stops.Add(this);
						this._StationID = value.StationID;
					}
					else
					{
						this._StationID = default(int);
					}
					this.SendPropertyChanged("Station");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StopDetails(StopDetail entity)
		{
			this.SendPropertyChanging();
			entity.Stop = this;
		}
		
		private void detach_StopDetails(StopDetail entity)
		{
			this.SendPropertyChanging();
			entity.Stop = null;
		}
	}
}
#pragma warning restore 1591
